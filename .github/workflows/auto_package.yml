name: PyInstaller Build & Release

on:
  push:
    branches:
      - '*'

jobs:
  create-new-pre-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Get current date
        id: get_date
        run: echo "DATE=$(TZ=Asia/Shanghai date +'%y%m%d')" >> $GITHUB_ENV

      - name: Get Git SHA
        id: get_sha
        run: echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Set tag
        run: |
          # Extract the version number from Suya_Downloader.py
          Suya_Downloader_VERSION=$(python -c "import re; match = re.search(r'Suya_Downloader_Version\s*=\s*\"([^\"]+)\"', open('Suya_Downloader.py').read()); print(match.group(1) if match else 'UNKNOWN')")
          # Extract the version number from Updater.py
          UPDATER_VERSION=$(python -c "import re; match = re.search(r'Suya_Updater_Version\s*=\s*\"([^\"]+)\"', open('Updater.py').read()); print(match.group(1) if match else 'UNKNOWN')")
          echo "TAG=${Suya_Downloader_VERSION}-${UPDATER_VERSION}-${{ env.DATE }}-${{ env.SHA }}" >> $GITHUB_ENV

      - name: Create Pre-Release and Upload JAR file
        uses: ncipollo/release-action@v1.15.0
        with:
          tag: ${{ env.TAG }}
          name: "版本 ${{ env.TAG }} (自动创建的版本)"
          body: |
            此预发布版本由Github Action自动构建。
            请注意，此版本为测试版，并不代表最终版本。
            正常发布成功将同时发布Windows，MacOS，以及Linux的版本，如未发现所需版本，可能是自动构建失败造成。
            ### 最后一次提交信息
            #### 提交SHA:
            > ${{ github.sha }}
            #### 提交作者:
            > ${{ github.event.head_commit.author.username }} 
            #### 提交时间:
            > ${{ github.event.head_commit.timestamp }}
            #### 提交消息:
            > ${{ github.event.head_commit.message }}
          draft: false
          prerelease: true
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}

  build-and-release-on-linux:
    needs: create-new-pre-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller psutil pygame requests Pillow

      - name: Update Dev_Version in Suya_Downloader.py
        run: |
          cd $(pwd)
          SHORT_SHA="${GITHUB_SHA:0:8}"
          sed -i "s/^Dev_Version = .*/Dev_Version = \"$SHORT_SHA\"/" Suya_Downloader.py
        shell: bash

      - name: Update Dev_Version in Updater.py
        run: |
          cd $(pwd)
          SHORT_SHA="${GITHUB_SHA:0:8}"
          sed -i "s/^Dev_Version = .*/Dev_Version = \"$SHORT_SHA\"/" Updater.py
        shell: bash

      - name: Build Suya_Downloader with PyInstaller
        id: build-Suya_Downloader
        run: |
          pyinstaller --onefile --distpath=./dist Suya_Downloader.py

      - name: Build Updater with PyInstaller
        id: build-updater
        run: |
          pyinstaller --onefile --distpath=./dist Updater.py

      - name: Move needed files to dist
        run: |
          mv Resources-Downloader ./dist/
          mv Resources-Server ./dist/
          mv LICENSE-APACHE ./dist/
          mv LICENSE-AGPL ./dist/
          mv default_api_setting.json ./dist/

      - name: Compress dist folder into app.zip
        run: |
          cd dist
          zip -r ../app.zip .
          cd ..

      - name: Get current date
        id: get_date
        run: echo "DATE=$(TZ=Asia/Shanghai date +'%y%m%d')" >> $GITHUB_ENV

      - name: Get Git SHA
        id: get_sha
        run: echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Set tag
        run: |
          # Extract the version number from Suya_Downloader.py
          Suya_Downloader_VERSION=$(python -c "import re; match = re.search(r'Suya_Downloader_Version\s*=\s*\"([^\"]+)\"', open('Suya_Downloader.py').read()); print(match.group(1) if match else 'UNKNOWN')")
          # Extract the version number from Updater.py
          UPDATER_VERSION=$(python -c "import re; match = re.search(r'Suya_Updater_Version\s*=\s*\"([^\"]+)\"', open('Updater.py').read()); print(match.group(1) if match else 'UNKNOWN')")
          echo "TAG=${Suya_Downloader_VERSION}-${UPDATER_VERSION}-${{ env.DATE }}-${{ env.SHA }}" >> $GITHUB_ENV

      - name: Upload assets to pre-release
        id: upload-assets-to-pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract the version number from Suya_Downloader.py
          Suya_Downloader_VERSION=$(python -c "import re; match = re.search(r'Suya_Downloader_Version\s*=\s*\"([^\"]+)\"', open('Suya_Downloader.py').read()); print(match.group(1) if match else 'UNKNOWN')")
          # Extract the version number from Updater.py
          UPDATER_VERSION=$(python -c "import re; match = re.search(r'Suya_Updater_Version\s*=\s*\"([^\"]+)\"', open('Updater.py').read()); print(match.group(1) if match else 'UNKNOWN')")
          # Extract the first 8 characters of the commit SHA
          COMMIT_SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-8)
          # Build the file names

          Suya_Downloader_FILE_NAME=Suya_Downloader-Linux-${Suya_Downloader_VERSION}-${COMMIT_SHA_SHORT}
          UPDATER_FILE_NAME=Updater-Linux-${UPDATER_VERSION}-${COMMIT_SHA_SHORT}
          FULL_FILES_NAME=Suya-Downloader-FULL-FILES-Linux-${Suya_Downloader_VERSION}-${UPDATER_VERSION}-${COMMIT_SHA_SHORT}
          
          # Rename the files
          mv ./dist/Suya_Downloader ./dist/${Suya_Downloader_FILE_NAME}
          mv ./dist/Updater ./dist/${UPDATER_FILE_NAME}
          mv ./app.zip ./${FULL_FILES_NAME}.zip
          
          # Upload the files
          gh release upload ${{ env.TAG }} ./dist/${Suya_Downloader_FILE_NAME}
          gh release upload ${{ env.TAG }} ./dist/${UPDATER_FILE_NAME}
          gh release upload ${{ env.TAG }} ./${FULL_FILES_NAME}.zip

  build-and-release-on-windows:
    needs: create-new-pre-release
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout Sign repo
        run: |
          git clone --depth=1 https://${{ secrets.GH_TOKEN }}@github.com/Suisuroru/sign.git
          move .\sign\* .
          rmdir /s /q .\sign
        shell: cmd

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller psutil pygame requests Pillow

      - name: Update Dev_Version in Suya_Downloader.py
        run: |
          $SHORT_SHA = "${{ github.sha }}".Substring(0,8)
          (Get-Content Suya_Downloader.py) | ForEach-Object { $_ -replace '^Dev_Version = .*$',"Dev_Version = ""$SHORT_SHA"""} | Set-Content Suya_Downloader.py
        shell: powershell

      - name: Update Dev_Version in Updater.py
        run: |
          $SHORT_SHA = "${{ github.sha }}".Substring(0,8)
          (Get-Content Updater.py) | ForEach-Object { $_ -replace '^Dev_Version = .*$',"Dev_Version = ""$SHORT_SHA"""} | Set-Content Updater.py
        shell: powershell

      - name: Build Suya_Downloader with PyInstaller
        id: build-Suya_Downloader
        run: |
          # Build the executable
          pyinstaller -F -w -i ./Resources-Downloader/Pictures/Suya.ico --distpath=./dist Suya_Downloader.py

      - name: Build Updater with PyInstaller
        id: build-updater
        run: |
          # Build the executable
          pyinstaller -F -w -i ./Resources-Downloader/Pictures/Suya.ico --distpath=./dist Updater.py

      - name: Sign Suya_Downloader executable
        run: |
          @echo off
          set SIGN_TOOL_PATH=%GITHUB_WORKSPACE%\signtool.exe
          set PFX_PATH=%GITHUB_WORKSPACE%\sign.pfx

          echo PFX Path: %PFX_PATH%

          if not exist "%PFX_PATH%" (
              echo Error: PFX file not found at path '%PFX_PATH%'.
              exit /b 1
          )

          "%SIGN_TOOL_PATH%" sign /f "%PFX_PATH%" /v /d "Suya Downloader" /tr http://timestamp.digicert.com /td SHA256 "%GITHUB_WORKSPACE%\dist\Suya_Downloader.exe"
        shell: cmd

      - name: Sign Updater executable
        run: |
          @echo off
          set SIGN_TOOL_PATH=%GITHUB_WORKSPACE%\signtool.exe
          set PFX_PATH=%GITHUB_WORKSPACE%\sign.pfx

          echo PFX Path: %PFX_PATH%

          if not exist "%PFX_PATH%" (
              echo Error: PFX file not found at path '%PFX_PATH%'.
              exit /b 1
          )

          "%SIGN_TOOL_PATH%" sign /f "%PFX_PATH%" /v /d "Updater" /tr http://timestamp.digicert.com /td SHA256 "%GITHUB_WORKSPACE%\dist\Updater.exe"
        shell: cmd

      - name: Zip the dist directory
        run: |
          # Navigate to the dist directory
          cd ./dist
          
          # Use 7z to create a zip archive of all files in the current directory
          7z a -tzip ../app.zip *
          
          # Return to the root directory
          cd ..
        shell: cmd

      - name: Set short commit SHA as environment variable
        run: |
          $Env:SHA_SHORT = "${{ github.sha }}".Substring(0,8)
          echo "SHA_SHORT=$Env:SHA_SHORT" >> $env:GITHUB_ENV
        shell: powershell

      - name: Extract Suya_Downloader version
        id: extract_Suya_Downloader_version
        run: |
          $content = Get-Content .\Suya_Downloader.py
          foreach ($line in $content) {
              if ($line.StartsWith("Suya_Downloader_Version")) {
                  $version = $line.Split('=')[1].Trim().Trim('"')
                  Write-Host "Suya_Downloader version: $version"
                  echo "Suya_Downloader_VERSION=$version" >> $env:GITHUB_ENV
                  break
              }
          }
        shell: powershell

      - name: Extract Updater version
        id: extract_updater_version
        run: |
          $content = Get-Content .\Updater.py
          foreach ($line in $content) {
              if ($line.StartsWith("Suya_Updater_Version")) {
                  $version = $line.Split('=')[1].Trim().Trim('"')
                  Write-Host "Updater version: $version"
                  echo "UPDATER_VERSION=$version" >> $env:GITHUB_ENV
                  break
              }
          }
        shell: powershell

      - name: Get current date
        id: get_date
        run: |
          Set-TimeZone -Id "China Standard Time"
          echo "DATE = $(Get-Date -Format 'yyMMdd')" >> $env:GITHUB_ENV
        shell: powershell

      - name: Get Git SHA
        id: get_sha
        run: echo "SHA=${{ github.sha }}" >> $env:GITHUB_ENV
        shell: powershell

      - name: Set tag
        run: |
          echo "TAG=${{ env.Suya_Downloader_VERSION }}-${{ env.UPDATER_VERSION }}-${{ env.DATE }}-${{ env.SHA }}" >> $env:GITHUB_ENV

      - name: Rename Suya_Downloader and Updater Executables
        run: |
          set Suya_Downloader_FILE_NAME=Suya_Downloader-Windows-%Suya_Downloader_VERSION%-%SHA_SHORT%.exe
          set UPDATER_FILE_NAME=Updater-Windows-%UPDATER_VERSION%-%SHA_SHORT%.exe
          set FULL_FILES_NAME=Suya-Downloader-FULL-FILES-Windows-%Suya_Downloader_VERSION%-%UPDATER_VERSION%-%SHA_SHORT%.zip

          cd dist
          ren Suya_Downloader.exe %Suya_Downloader_FILE_NAME%
          ren Updater.exe %UPDATER_FILE_NAME%
          cd ..
          ren app.zip %FULL_FILES_NAME%
        shell: cmd

      - name: Upload assets to latest pre-release
        id: upload-assets-to-pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Build the file names
          $Suya_Downloader_FILE_NAME="Suya_Downloader-Windows-${env:Suya_Downloader_VERSION}-${env:SHA_SHORT}.exe"
          $UPDATER_FILE_NAME="Updater-Windows-${env:UPDATER_VERSION}-${env:SHA_SHORT}.exe"
          $FULL_FILES_NAME="Suya-Downloader-FULL-FILES-Windows-${env:Suya_Downloader_VERSION}-${env:UPDATER_VERSION}-${env:SHA_SHORT}"

          # Upload the files
          gh release upload ${env:TAG} ./dist/${Suya_Downloader_FILE_NAME}
          gh release upload ${env:TAG} ./dist/${UPDATER_FILE_NAME}
          gh release upload ${env:TAG} ./${FULL_FILES_NAME}.zip

  build-and-release-on-macos:
    needs: create-new-pre-release
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller psutil pygame requests Pillow

      - name: Set short commit SHA as environment variable
        run: |
          SHORT_SHA="${GITHUB_SHA::8}"
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV

      - name: Extract Suya_Downloader version
        id: extract_suya_downloader_version
        run: |
          VERSION=$(python -c "import re; match = re.search(r'Suya_Downloader_Version\s*=\s*\"([^\"]+)\"', open('Suya_Downloader.py').read()); print(match.group(1) if match else 'UNKNOWN')")
          echo "Suya_Downloader_VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Extract Updater version
        id: extract_updater_version
        run: |
          VERSION=$(python -c "import re; match = re.search(r'Suya_Updater_Version\s*=\s*\"([^\"]+)\"', open('Updater.py').read()); print(match.group(1) if match else 'UNKNOWN')")
          echo "UPDATER_VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Update Dev_Version in Suya_Downloader.py
        run: |
          sed -i '' "s/^Dev_Version = .*/Dev_Version = \"${SHORT_SHA}\"/" Suya_Downloader.py
        shell: bash

      - name: Update Dev_Version in Updater.py
        run: |
          sed -i '' "s/^Dev_Version = .*/Dev_Version = \"${SHORT_SHA}\"/" Updater.py
        shell: bash

      - name: Build Suya_Downloader with PyInstaller
        id: build-Suya_Downloader
        run: |
          # Build the macOS app bundle
          pyinstaller --onefile --windowed --distpath=./dist Suya_Downloader.py

      - name: Build Updater with PyInstaller
        id: build-updater
        run: |
          # Build the macOS app bundle
          pyinstaller --onefile --windowed --distpath=./dist Updater.py

      - name: Move needed files to dist
        run: |
          mv ./Resources-Downloader ./dist/Resources-Downloader
          mv ./Resources-Server ./dist/Resources-Server
          mv ./LICENSE-APACHE ./dist/LICENSE-APACHE
          mv ./LICENSE-AGPL ./dist/LICENSE-AGPL
          mv ./default_api_setting.json ./dist/default_api_setting.json

      - name: Package dist files into a zip archive
        run: |
          # Navigate to the dist directory
          cd dist
          
          # Create a zip archive of the contents in the dist directory
          zip -r ../app.zip .

      - name: Package Suya_Downloader.app into a zip archive
        id: package-Suya_Downloader
        run: |
          cd dist
          zip -r ../Suya_Downloader.zip ./Suya_Downloader.app
        shell: bash

      - name: Package Updater.app into a zip archive
        id: package-updater
        run: |
          cd dist
          zip -r ../Updater.zip ./Updater.app
        shell: bash

      - name: Get current date
        id: get_date
        run: echo "DATE=$(TZ=Asia/Shanghai date +'%y%m%d')" >> $GITHUB_ENV

      - name: Get Git SHA
        id: get_sha
        run: echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Set tag
        run: |
          echo "TAG=${Suya_Downloader_VERSION}-${UPDATER_VERSION}-${DATE}-${SHA}" >> $GITHUB_ENV

      - name: Upload assets to pre-release
        id: upload-assets-to-pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Build the file names
          Suya_Downloader_FILE_NAME=Suya_Downloader-MacOS-${Suya_Downloader_VERSION}-${SHORT_SHA}.zip
          UPDATER_FILE_NAME=Updater-MacOS-${UPDATER_VERSION}-${SHORT_SHA}.zip
          FULL_FILES_NAME=Suya-Downloader-FULL-FILES-MacOS-${Suya_Downloader_VERSION}-${UPDATER_VERSION}-${SHORT_SHA}.zip
          
          # Rename the files
          mv "./Suya_Downloader.zip" "./${Suya_Downloader_FILE_NAME}"
          mv "./Updater.zip" "./${UPDATER_FILE_NAME}"
          mv "./app.zip" "./${FULL_FILES_NAME}"
          
          # Upload the files
          gh release upload ${{ env.TAG }} "./${Suya_Downloader_FILE_NAME}"
          gh release upload ${{ env.TAG }} "./${UPDATER_FILE_NAME}"
          gh release upload ${{ env.TAG }} "./${FULL_FILES_NAME}"
